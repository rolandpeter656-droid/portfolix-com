// PortfoliX Institutional v1.0 - PDF Export Service
// Modular PDF generation for portfolios with compliance

import jsPDF from "jspdf";
import { InstitutionalPortfolio } from "./types";
import { INSTITUTIONAL_DISCLAIMER_TEXT } from "@/components/institutional/InstitutionalDisclaimer";

export class PDFExportService {
  /**
   * Generate portfolio PDF with compliance disclaimer
   */
  static generatePortfolioPDF(portfolio: InstitutionalPortfolio): jsPDF {
    const doc = new jsPDF();

    // Header
    this.addHeader(doc, portfolio);

    // Portfolio Details
    this.addPortfolioDetails(doc, portfolio);

    // Asset Allocation
    this.addAllocationSection(doc, portfolio);

    // AI Rationale
    this.addRationaleSection(doc, portfolio);

    // Footer & Compliance
    this.addFooter(doc);

    return doc;
  }

  private static addHeader(doc: jsPDF, portfolio: InstitutionalPortfolio) {
    doc.setFontSize(20);
    doc.setTextColor(217, 119, 6); // Amber
    doc.text("PortfoliX", 20, 20);

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text("Institutional Portfolio Report", 20, 28);

    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text(portfolio.portfolio_name, 20, 45);
  }

  private static addPortfolioDetails(doc: jsPDF, portfolio: InstitutionalPortfolio) {
    doc.setFontSize(11);
    let y = 55;

    const details = [
      `Created: ${new Date(portfolio.created_at).toLocaleDateString()}`,
      `Type: ${portfolio.portfolio_type}`,
      `Risk Tolerance: ${portfolio.risk_tolerance || 'N/A'}`,
      `Investment Horizon: ${portfolio.investment_horizon || 'N/A'}`,
      `Liquidity Needs: ${portfolio.liquidity_needs || 'N/A'}`,
      `Capital Size: $${portfolio.capital_size?.toLocaleString() || 'N/A'}`,
      `Expected Return: ${portfolio.expected_return || 'N/A'}`,
      `Volatility: ${portfolio.volatility || 'N/A'}`,
    ];

    if (portfolio.ai_confidence_score) {
      details.push(`AI Confidence: ${portfolio.ai_confidence_score}%`);
    }

    details.forEach((detail) => {
      doc.text(detail, 20, y);
      y += 7;
    });

    return y;
  }

  private static addAllocationSection(doc: jsPDF, portfolio: InstitutionalPortfolio) {
    let y = 120;
    doc.setFontSize(14);
    doc.text("Asset Allocation", 20, y);

    doc.setFontSize(11);
    y += 8;

    Object.entries(portfolio.allocation).forEach(([asset, percent]) => {
      const assetName = asset.charAt(0).toUpperCase() + asset.slice(1);
      doc.text(`${assetName}: ${percent}%`, 25, y);
      y += 7;
    });

    return y;
  }

  private static addRationaleSection(doc: jsPDF, portfolio: InstitutionalPortfolio) {
    if (!portfolio.rationale) return;

    let y = 180;
    doc.setFontSize(14);
    doc.text("AI Portfolio Rationale", 20, y);

    doc.setFontSize(10);
    const rationaleLines = doc.splitTextToSize(portfolio.rationale, 170);
    doc.text(rationaleLines, 20, y + 8);

    if (portfolio.inspired_by) {
      y += rationaleLines.length * 5 + 15;
      doc.setFontSize(9);
      doc.setTextColor(100, 100, 100);
      doc.text(`Inspired by: ${portfolio.inspired_by}`, 20, y);
    }
  }

  private static addFooter(doc: jsPDF) {
    // Watermark
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text("Generated by PortfoliX Institutional Portal", 20, 265);

    // Compliance Disclaimer
    doc.setFontSize(7);
    doc.setTextColor(100, 100, 100);
    const disclaimerLines = doc.splitTextToSize(INSTITUTIONAL_DISCLAIMER_TEXT, 170);
    doc.text(disclaimerLines, 20, 273);

    // Reference link
    doc.setFontSize(6);
    doc.setTextColor(120, 120, 120);
    doc.text(
      "Full compliance: portfolix.com/legal/institutional-disclaimer",
      20,
      290
    );
  }

  /**
   * Save PDF with standardized filename
   */
  static savePDF(doc: jsPDF, portfolioName: string) {
    const filename = `${portfolioName.replace(/\s+/g, "_")}_Portfolio_Report.pdf`;
    doc.save(filename);
  }

  /**
   * Generate and save portfolio PDF (convenience method)
   */
  static exportPortfolio(portfolio: InstitutionalPortfolio) {
    const doc = this.generatePortfolioPDF(portfolio);
    this.savePDF(doc, portfolio.portfolio_name);
  }
}
