import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Portfolio3DPieChart } from "@/components/Portfolio3DPieChart";
import { Download, Mail, TrendingUp, Shield, Sparkles } from "lucide-react";
import { InstitutionalDisclaimer, INSTITUTIONAL_DISCLAIMER_TEXT } from "./InstitutionalDisclaimer";
import { toast } from "sonner";
import jsPDF from "jspdf";

interface GeneratedPortfolioModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  portfolio: {
    name: string;
    allocation: Record<string, number>;
    rationale: string;
    expectedReturn: string;
    volatility: string;
    riskTolerance: string;
    aiConfidenceScore?: number;
  } | null;
}

// Color mapping for different asset classes
const ASSET_COLORS: Record<string, string> = {
  cash: "#10b981",
  bonds: "#3b82f6",
  equities: "#8b5cf6",
  etfs: "#f59e0b",
  crypto: "#ef4444",
  commodities: "#14b8a6",
};

export const GeneratedPortfolioModal = ({
  open,
  onOpenChange,
  portfolio,
}: GeneratedPortfolioModalProps) => {
  if (!portfolio) return null;

  // Transform allocation data for 3D chart
  const chartData = Object.entries(portfolio.allocation)
    .filter(([_, value]) => value > 0)
    .map(([asset, allocation]) => ({
      symbol: asset.toUpperCase().slice(0, 3),
      name: asset.charAt(0).toUpperCase() + asset.slice(1),
      allocation: allocation,
      color: ASSET_COLORS[asset.toLowerCase()] || "#6b7280",
    }));

  const handleDownloadPDF = () => {
    const doc = new jsPDF();

    // Header
    doc.setFontSize(20);
    doc.setTextColor(217, 119, 6);
    doc.text("PortfoliX Institutional", 20, 20);

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text("AI-Generated Portfolio", 20, 28);

    // Portfolio Name
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text(portfolio.name, 20, 45);

    // Metrics
    doc.setFontSize(11);
    doc.text(`Expected Return: ${portfolio.expectedReturn}`, 20, 55);
    doc.text(`Volatility: ${portfolio.volatility}`, 20, 62);
    doc.text(`Risk Tolerance: ${portfolio.riskTolerance}`, 20, 69);
    if (portfolio.aiConfidenceScore) {
      doc.text(`AI Confidence: ${portfolio.aiConfidenceScore}%`, 20, 76);
    }

    // Allocation
    doc.setFontSize(14);
    doc.text("Asset Allocation", 20, 90);
    doc.setFontSize(11);
    let y = 98;
    Object.entries(portfolio.allocation).forEach(([asset, percent]) => {
      if (percent > 0) {
        doc.text(`${asset.charAt(0).toUpperCase() + asset.slice(1)}: ${percent}%`, 25, y);
        y += 7;
      }
    });

    // Rationale
    doc.setFontSize(14);
    doc.text("AI Strategy Rationale", 20, y + 10);
    doc.setFontSize(10);
    const rationaleLines = doc.splitTextToSize(portfolio.rationale, 170);
    doc.text(rationaleLines, 20, y + 18);

    // Footer
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text("Generated by PortfoliX Institutional Portal", 20, 265);

    // Compliance Disclaimer
    doc.setFontSize(7);
    doc.setTextColor(100, 100, 100);
    const disclaimerLines = doc.splitTextToSize(INSTITUTIONAL_DISCLAIMER_TEXT, 170);
    doc.text(disclaimerLines, 20, 273);

    doc.setFontSize(6);
    doc.setTextColor(120, 120, 120);
    doc.text("For full methodology: portfolix.com/legal/institutional-disclaimer", 20, 290);

    doc.save(`${portfolio.name.replace(/\s+/g, "_")}_Portfolio.pdf`);
    toast.success("Portfolio PDF downloaded successfully!");
  };

  const handleContactDesk = () => {
    toast.info("Strategy desk contact: institutional@portfolix.com");
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-2xl flex items-center gap-2">
            <Sparkles className="h-6 w-6 text-primary" />
            {portfolio.name}
          </DialogTitle>
          <DialogDescription>
            AI-generated institutional portfolio with optimized allocation
          </DialogDescription>
        </DialogHeader>

        <div className="grid md:grid-cols-2 gap-6 mt-4">
          {/* Left: 3D Visualization */}
          <div className="space-y-4">
            <div className="p-4 rounded-lg bg-gradient-to-br from-card to-secondary border border-border">
              <h3 className="text-sm font-semibold mb-4">Asset Allocation (3D View)</h3>
              <Portfolio3DPieChart data={chartData} />
            </div>

            {/* Key Metrics */}
            <div className="grid grid-cols-2 gap-3">
              <div className="p-3 rounded-lg bg-success/10 border border-success/20">
                <div className="flex items-center gap-2 mb-1">
                  <TrendingUp className="h-4 w-4 text-success" />
                  <span className="text-xs font-medium text-muted-foreground">Expected Return</span>
                </div>
                <p className="text-lg font-bold text-success">{portfolio.expectedReturn}</p>
              </div>
              <div className="p-3 rounded-lg bg-warning/10 border border-warning/20">
                <div className="flex items-center gap-2 mb-1">
                  <Shield className="h-4 w-4 text-warning" />
                  <span className="text-xs font-medium text-muted-foreground">Volatility</span>
                </div>
                <p className="text-lg font-bold text-warning">{portfolio.volatility}</p>
              </div>
            </div>

            {portfolio.aiConfidenceScore && (
              <div className="p-3 rounded-lg bg-primary/10 border border-primary/20">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">AI Confidence Score</span>
                  <Badge className="bg-primary text-primary-foreground">
                    {portfolio.aiConfidenceScore}%
                  </Badge>
                </div>
              </div>
            )}
          </div>

          {/* Right: Details */}
          <div className="space-y-4">
            {/* Allocation Breakdown */}
            <div className="space-y-3">
              <h3 className="text-sm font-semibold">Allocation Breakdown</h3>
              {Object.entries(portfolio.allocation).map(([asset, percentage]) => {
                if (percentage === 0) return null;
                return (
                  <div key={asset} className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <div
                        className="w-3 h-3 rounded-full"
                        style={{ backgroundColor: ASSET_COLORS[asset.toLowerCase()] || "#6b7280" }}
                      />
                      <span className="text-sm capitalize">{asset}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-24 h-2 bg-muted rounded-full overflow-hidden">
                        <div
                          className="h-full"
                          style={{
                            width: `${percentage}%`,
                            backgroundColor: ASSET_COLORS[asset.toLowerCase()] || "#6b7280",
                          }}
                        />
                      </div>
                      <span className="font-medium w-12 text-right text-sm">{percentage}%</span>
                    </div>
                  </div>
                );
              })}
            </div>

            {/* AI Rationale */}
            <div className="p-4 rounded-lg bg-primary/5 border border-primary/10">
              <p className="text-xs font-semibold text-primary mb-2 flex items-center gap-1">
                <Sparkles className="h-3 w-3" />
                AI Strategy Rationale
              </p>
              <p className="text-sm text-muted-foreground leading-relaxed">
                {portfolio.rationale}
              </p>
            </div>

            {/* Actions */}
            <div className="space-y-2">
              <Button onClick={handleDownloadPDF} variant="outline" className="w-full">
                <Download className="mr-2 h-4 w-4" />
                Download PDF Report
              </Button>
              <Button onClick={handleContactDesk} className="w-full">
                <Mail className="mr-2 h-4 w-4" />
                Contact Strategy Desk
              </Button>
            </div>
          </div>
        </div>

        {/* Compliance Footer */}
        <div className="mt-6 pt-6 border-t border-border">
          <InstitutionalDisclaimer variant="compact" />
        </div>
      </DialogContent>
    </Dialog>
  );
};
