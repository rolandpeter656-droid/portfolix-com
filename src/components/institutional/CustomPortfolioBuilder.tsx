import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { X, Download, Mail, Sparkles } from "lucide-react";
import { toast } from "sonner";
import { InstitutionalDisclaimer, INSTITUTIONAL_DISCLAIMER_TEXT } from "./InstitutionalDisclaimer";
import jsPDF from "jspdf";

interface CustomPortfolioBuilderProps {
  onClose: () => void;
}

export const CustomPortfolioBuilder = ({
  onClose,
}: CustomPortfolioBuilderProps) => {
  const [horizon, setHorizon] = useState("5-years");
  const [liquidity, setLiquidity] = useState("moderate");
  const [riskTolerance, setRiskTolerance] = useState("moderate");
  const [capitalSize, setCapitalSize] = useState([10]);
  const [generating, setGenerating] = useState(false);
  const [generatedPortfolio, setGeneratedPortfolio] = useState<any>(null);

  const handleGenerate = async () => {
    setGenerating(true);

    // Simulate AI generation
    setTimeout(() => {
      const portfolio = {
        name: `Custom ${riskTolerance.charAt(0).toUpperCase() + riskTolerance.slice(1)} Strategy`,
        allocation: {
          equities: riskTolerance === "aggressive" ? 60 : riskTolerance === "moderate" ? 40 : 20,
          bonds: riskTolerance === "conservative" ? 50 : riskTolerance === "moderate" ? 35 : 20,
          cash: liquidity === "high" ? 30 : liquidity === "moderate" ? 15 : 5,
          etfs: 10,
          crypto: riskTolerance === "aggressive" ? 5 : 0,
          commodities: riskTolerance === "moderate" ? 5 : riskTolerance === "conservative" ? 10 : 5,
        },
        rationale: `This portfolio is optimized for a ${horizon} investment horizon with ${liquidity} liquidity needs and ${riskTolerance} risk tolerance. Capital allocation of $${capitalSize[0]}M is distributed to maximize risk-adjusted returns while maintaining institutional compliance standards.`,
        expectedReturn: riskTolerance === "aggressive" ? "9-14%" : riskTolerance === "moderate" ? "6-10%" : "4-7%",
        volatility: riskTolerance === "aggressive" ? "High" : riskTolerance === "moderate" ? "Moderate" : "Low",
      };

      setGeneratedPortfolio(portfolio);
      setGenerating(false);
      toast.success("Institutional portfolio generated successfully!");
    }, 2000);
  };

  const handleDownloadPDF = () => {
    if (!generatedPortfolio) return;

    const doc = new jsPDF();

    // Header
    doc.setFontSize(20);
    doc.setTextColor(217, 119, 6); // Amber
    doc.text("PortfoliX", 20, 20);

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text("Custom Institutional Portfolio", 20, 28);

    // Portfolio Name
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text(generatedPortfolio.name, 20, 45);

    // Parameters
    doc.setFontSize(11);
    doc.text(`Investment Horizon: ${horizon}`, 20, 55);
    doc.text(`Liquidity Needs: ${liquidity}`, 20, 62);
    doc.text(`Risk Tolerance: ${riskTolerance}`, 20, 69);
    doc.text(`Capital Size: $${capitalSize[0]}M`, 20, 76);
    doc.text(`Expected Return: ${generatedPortfolio.expectedReturn}`, 20, 83);
    doc.text(`Volatility: ${generatedPortfolio.volatility}`, 20, 90);

    // Allocation
    doc.setFontSize(14);
    doc.text("Asset Allocation", 20, 105);
    doc.setFontSize(11);
    let y = 113;
    Object.entries(generatedPortfolio.allocation).forEach(([asset, percent]: [string, any]) => {
      doc.text(`${asset.charAt(0).toUpperCase() + asset.slice(1)}: ${percent}%`, 25, y);
      y += 7;
    });

    // Rationale
    doc.setFontSize(14);
    doc.text("AI Rationale", 20, y + 10);
    doc.setFontSize(10);
    const rationaleLines = doc.splitTextToSize(generatedPortfolio.rationale, 170);
    doc.text(rationaleLines, 20, y + 18);

    // Footer & Disclaimer
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text("Generated by PortfoliX Institutional Portal", 20, 265);

    // Compliance Disclaimer
    doc.setFontSize(7);
    doc.setTextColor(100, 100, 100);
    const disclaimerLines = doc.splitTextToSize(INSTITUTIONAL_DISCLAIMER_TEXT, 170);
    doc.text(disclaimerLines, 20, 273);

    // Footer note
    doc.setFontSize(6);
    doc.setTextColor(120, 120, 120);
    doc.text("For full compliance documentation, visit: portfolix.com/legal/institutional-disclaimer", 20, 290);

    doc.save(`${generatedPortfolio.name.replace(/\s+/g, "_")}_Custom_Portfolio.pdf`);
    toast.success("Portfolio PDF downloaded successfully!");
  };

  const handleContactDesk = () => {
    toast.info("Strategy desk contact form coming soon!");
  };

  return (
    <div className="fixed inset-0 z-50 bg-background/95 backdrop-blur-lg overflow-y-auto">
      <div className="container mx-auto max-w-5xl px-4 py-8">
        <div className="flex items-center justify-between mb-8">
          <h2 className="text-3xl font-bold">Custom Portfolio Builder</h2>
          <Button
            variant="ghost"
            size="icon"
            onClick={onClose}
            className="hover:bg-muted"
          >
            <X className="h-5 w-5" />
          </Button>
        </div>

        <div className="grid md:grid-cols-2 gap-8">
          {/* Parameters Form */}
          <Card className="p-6 space-y-6 bg-gradient-to-br from-card to-secondary border border-border">
            <div className="space-y-2">
              <Label htmlFor="horizon" className="text-base font-semibold">
                Investment Horizon
              </Label>
              <Select value={horizon} onValueChange={setHorizon}>
                <SelectTrigger id="horizon">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1-year">1 Year - Short Term</SelectItem>
                  <SelectItem value="3-years">3 Years - Medium Term</SelectItem>
                  <SelectItem value="5-years">5 Years - Standard</SelectItem>
                  <SelectItem value="10-years">10+ Years - Long Term</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="liquidity" className="text-base font-semibold">
                Liquidity Needs
              </Label>
              <Select value={liquidity} onValueChange={setLiquidity}>
                <SelectTrigger id="liquidity">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="high">High - Quick Access Required</SelectItem>
                  <SelectItem value="moderate">Moderate - Balanced</SelectItem>
                  <SelectItem value="low">Low - Long-Term Lock-In</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="risk" className="text-base font-semibold">
                Risk Tolerance
              </Label>
              <Select value={riskTolerance} onValueChange={setRiskTolerance}>
                <SelectTrigger id="risk">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="conservative">Conservative</SelectItem>
                  <SelectItem value="moderate">Moderate</SelectItem>
                  <SelectItem value="aggressive">Aggressive</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-4">
              <Label htmlFor="capital" className="text-base font-semibold">
                Capital Size (in millions)
              </Label>
              <div className="flex items-center gap-4">
                <Slider
                  id="capital"
                  value={capitalSize}
                  onValueChange={setCapitalSize}
                  max={500}
                  min={1}
                  step={1}
                  className="flex-1"
                />
                <span className="font-bold text-primary min-w-[80px] text-right">
                  ${capitalSize[0]}M
                </span>
              </div>
            </div>

            <Button
              onClick={handleGenerate}
              disabled={generating}
              className="w-full bg-primary hover:bg-primary-glow text-primary-foreground"
            >
              {generating ? (
                <>
                  <Sparkles className="mr-2 h-4 w-4 animate-spin" />
                  Generating with AI...
                </>
              ) : (
                <>
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate Portfolio
                </>
              )}
            </Button>
          </Card>

          {/* Results Display */}
          <Card className="p-6 space-y-6 bg-gradient-to-br from-card to-secondary border border-border">
            {!generatedPortfolio ? (
              <div className="h-full flex items-center justify-center">
                <div className="text-center space-y-2">
                  <Sparkles className="h-12 w-12 text-muted-foreground mx-auto" />
                  <p className="text-muted-foreground">
                    Configure parameters and generate your custom institutional
                    portfolio
                  </p>
                </div>
              </div>
            ) : (
              <div className="space-y-6">
                <div>
                  <h3 className="text-2xl font-bold mb-2">
                    {generatedPortfolio.name}
                  </h3>
                  <div className="flex gap-2">
                    <Badge className="bg-success/20 text-success border-success/30">
                      {generatedPortfolio.expectedReturn} Expected Return
                    </Badge>
                    <Badge className="bg-warning/20 text-warning border-warning/30">
                      {generatedPortfolio.volatility} Volatility
                    </Badge>
                  </div>
                </div>

                <div className="space-y-3">
                  <p className="font-semibold">Allocation Breakdown:</p>
                  <div className="space-y-2">
                    {Object.entries(generatedPortfolio.allocation).map(
                      ([asset, percentage]: [string, any]) => (
                        <div
                          key={asset}
                          className="flex justify-between items-center"
                        >
                          <span className="text-muted-foreground capitalize">
                            {asset}
                          </span>
                          <div className="flex items-center gap-2">
                            <div className="w-32 h-2 bg-muted rounded-full overflow-hidden">
                              <div
                                className="h-full bg-primary"
                                style={{ width: `${percentage}%` }}
                              />
                            </div>
                            <span className="font-medium w-12 text-right">
                              {percentage}%
                            </span>
                          </div>
                        </div>
                      )
                    )}
                  </div>
                </div>

                <div className="p-4 rounded-lg bg-primary/5 border border-primary/10">
                  <p className="text-sm font-medium text-primary mb-2">
                    AI Rationale
                  </p>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    {generatedPortfolio.rationale}
                  </p>
                </div>

                <div className="space-y-3">
                  <Button
                    onClick={handleDownloadPDF}
                    variant="outline"
                    className="w-full"
                  >
                    <Download className="mr-2 h-4 w-4" />
                    Download Portfolio PDF
                  </Button>
                  <Button
                    onClick={handleContactDesk}
                    className="w-full bg-primary hover:bg-primary-glow text-primary-foreground"
                  >
                    <Mail className="mr-2 h-4 w-4" />
                    Contact Strategy Desk
                  </Button>
                </div>

                {/* Compliance Disclaimer */}
                <div className="mt-6 pt-6 border-t border-border">
                  <InstitutionalDisclaimer variant="compact" />
                </div>
              </div>
            )}
          </Card>
        </div>
      </div>
    </div>
  );
};
